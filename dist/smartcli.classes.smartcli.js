"use strict";
require("typings-global");
var plugins = require("./smartcli.plugins");
var Smartcli = (function () {
    function Smartcli() {
        this.argv = plugins.argv;
        this.questionsDone = plugins.q.defer();
        this.parseStarted = plugins.q.defer();
    }
    Smartcli.prototype.addAlias = function (keyArg, aliasArg) {
        this.argv = this.argv.alias(keyArg, aliasArg);
    };
    ;
    Smartcli.prototype.addCommand = function (definitionArg) {
        var _this = this;
        var done = plugins.q.defer();
        this.parseStarted
            .then(function () {
            if (_this.argv._.indexOf(definitionArg.commandName) == 0) {
                done.resolve();
            }
            else {
                return done.reject();
            }
        });
        return done.promsise;
    };
    ;
    Smartcli.prototype.addQuestion = function (definitionArg) {
    };
    ;
    Smartcli.prototype.addVersion = function (versionArg) {
        this.version = versionArg;
        this.parseStarted
            .then(function () {
        });
    };
    Smartcli.prototype.standardTask = function () {
        var _this = this;
        var done = plugins.q.defer();
        this.parseStarted
            .then(function () {
            if (plugins.argv._.length == 0 || _this.commands.length == 0) {
                done.resolve();
            }
            else {
                done.reject();
            }
            ;
        });
        return done.promise;
    };
    Smartcli.prototype.startParse = function () {
        this.parseStarted.resolve();
    };
    return Smartcli;
}());
exports.Smartcli = Smartcli;

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtYXJ0Y2xpLmNsYXNzZXMuc21hcnRjbGkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU8sZ0JBQWdCLENBQUMsQ0FBQTtBQUV4QixJQUFZLE9BQU8sV0FBTSxvQkFDekIsQ0FBQyxDQUQ0QztBQUc3QztJQU9JO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN2QyxJQUFJLENBQUMsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDMUMsQ0FBQztJQUNELDJCQUFRLEdBQVIsVUFBUyxNQUFNLEVBQUMsUUFBUTtRQUNwQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBQyxRQUFRLENBQUMsQ0FBQztJQUNqRCxDQUFDOztJQUNELDZCQUFVLEdBQVYsVUFBVyxhQUFrQztRQUE3QyxpQkFXQztRQVZHLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVk7YUFDWixJQUFJLENBQUM7WUFDRixFQUFFLENBQUMsQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNuQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUN6QixDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDOztJQUNELDhCQUFXLEdBQVgsVUFBWSxhQUF5RDtJQUVyRSxDQUFDOztJQUNELDZCQUFVLEdBQVYsVUFBVyxVQUFpQjtRQUN4QixJQUFJLENBQUMsT0FBTyxHQUFHLFVBQVUsQ0FBQztRQUMxQixJQUFJLENBQUMsWUFBWTthQUNaLElBQUksQ0FBQztRQUVOLENBQUMsQ0FBQyxDQUFBO0lBQ1YsQ0FBQztJQUNELCtCQUFZLEdBQVo7UUFBQSxpQkFXQztRQVZHLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVk7YUFDWixJQUFJLENBQUM7WUFDRixFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLEtBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFBLENBQUM7Z0JBQ3hELElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUNuQixDQUFDO1lBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ0osSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ2xCLENBQUM7WUFBQSxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7UUFDUCxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDO0lBQ0QsNkJBQVUsR0FBVjtRQUNJLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDaEMsQ0FBQztJQUVMLGVBQUM7QUFBRCxDQXJEQSxBQXFEQyxJQUFBO0FBckRZLGdCQUFRLFdBcURwQixDQUFBIiwiZmlsZSI6InNtYXJ0Y2xpLmNsYXNzZXMuc21hcnRjbGkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXCJ0eXBpbmdzLWdsb2JhbFwiO1xuXG5pbXBvcnQgKiBhcyBwbHVnaW5zIGZyb20gXCIuL3NtYXJ0Y2xpLnBsdWdpbnNcIlxuaW1wb3J0ICogYXMgU21hcnRjbGlJbnRlcmFjdGlvbnMgZnJvbSBcIi4vc21hcnRjbGkuaW50ZXJhY3Rpb25cIjtcblxuZXhwb3J0IGNsYXNzIFNtYXJ0Y2xpIHtcbiAgICBhcmd2O1xuICAgIHF1ZXN0aW9uc0RvbmU7XG4gICAgcGFyc2VTdGFydGVkO1xuICAgIGNvbW1hbmRzO1xuICAgIHF1ZXN0aW9ucztcbiAgICB2ZXJzaW9uOnN0cmluZztcbiAgICBjb25zdHJ1Y3Rvcigpe1xuICAgICAgICB0aGlzLmFyZ3YgPSBwbHVnaW5zLmFyZ3Y7XG4gICAgICAgIHRoaXMucXVlc3Rpb25zRG9uZSA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgICAgICB0aGlzLnBhcnNlU3RhcnRlZCA9IHBsdWdpbnMucS5kZWZlcigpO1xuICAgIH1cbiAgICBhZGRBbGlhcyhrZXlBcmcsYWxpYXNBcmcpe1xuICAgICAgICB0aGlzLmFyZ3YgPSB0aGlzLmFyZ3YuYWxpYXMoa2V5QXJnLGFsaWFzQXJnKTtcbiAgICB9O1xuICAgIGFkZENvbW1hbmQoZGVmaW5pdGlvbkFyZzp7Y29tbWFuZE5hbWU6c3RyaW5nfSl7XG4gICAgICAgIGxldCBkb25lID0gcGx1Z2lucy5xLmRlZmVyKCk7XG4gICAgICAgIHRoaXMucGFyc2VTdGFydGVkXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYXJndi5fLmluZGV4T2YoZGVmaW5pdGlvbkFyZy5jb21tYW5kTmFtZSkgPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBkb25lLnJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZG9uZS5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGRvbmUucHJvbXNpc2U7XG4gICAgfTtcbiAgICBhZGRRdWVzdGlvbihkZWZpbml0aW9uQXJnOntxdWVzdGlvblN0cmluZzpzdHJpbmcscXVlc3Rpb25UeXBlOnN0cmluZ30pe1xuICAgICAgICBcbiAgICB9O1xuICAgIGFkZFZlcnNpb24odmVyc2lvbkFyZzpzdHJpbmcpe1xuICAgICAgICB0aGlzLnZlcnNpb24gPSB2ZXJzaW9uQXJnO1xuICAgICAgICB0aGlzLnBhcnNlU3RhcnRlZFxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuXG4gICAgICAgICAgICB9KVxuICAgIH1cbiAgICBzdGFuZGFyZFRhc2soKXtcbiAgICAgICAgbGV0IGRvbmUgPSBwbHVnaW5zLnEuZGVmZXIoKTtcbiAgICAgICAgdGhpcy5wYXJzZVN0YXJ0ZWRcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBpZihwbHVnaW5zLmFyZ3YuXy5sZW5ndGggPT0gMCB8fCB0aGlzLmNvbW1hbmRzLmxlbmd0aCA9PSAwKXtcbiAgICAgICAgICAgICAgICAgICAgZG9uZS5yZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZG9uZS5yZWplY3QoKTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBkb25lLnByb21pc2U7XG4gICAgfVxuICAgIHN0YXJ0UGFyc2UoKXtcbiAgICAgICAgdGhpcy5wYXJzZVN0YXJ0ZWQucmVzb2x2ZSgpO1xuICAgIH1cblxufSJdfQ==
