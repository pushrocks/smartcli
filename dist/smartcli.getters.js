/// <reference path="typings/index.d.ts" />
"use strict";
var plugins = require("./smartcli.plugins");
var SmartcliChecks = require("./smartcli.checks");
/**
 *
 * @param commandString
 * @returns {{specified: boolean, name: any, arguments: CliCommandArgument}}
 */
exports.command = function () {
    var cliCommand = {
        specified: SmartcliChecks.commandPresence(),
        name: plugins.argv._[0],
        arguments: exports.commandArgs()
    };
    return cliCommand;
};
/**
 * gets the second or higher value of plugins.argv._ if specified and returns it as commandArgument
 * @param argumentLevel
 * @returns {{specified: (boolean|boolean), name}}
 */
exports.commandArgument = function (argumentLevel) {
    var commandArgument = {
        specified: false,
        name: "undefined",
        level: argumentLevel
    };
    if (argumentLevel < 1) {
        plugins.beautylog.error("smartcli.get.argument cannot be invoked with an argumentLevel smaller than 1");
        return commandArgument;
    }
    if (SmartcliChecks.commandArgumentPresence(argumentLevel)) {
        commandArgument.specified = true;
        commandArgument.name = plugins.argv._[argumentLevel];
    }
    return commandArgument;
};
/**
 * returns array with commandArgs
 * @returns {CliCommandArgument[]}
 */
exports.commandArgs = function () {
    var commandArgs = [];
    var argsArray = exports.commandArray().slice(0);
    argsArray.shift();
    for (var item in argsArray) {
        var commandArgument_1 = {
            specified: true,
            name: argsArray[item],
            level: parseInt(item) + 1
        };
        commandArgs.push(commandArgument_1);
    }
    return commandArgs;
};
/**
 * returns complete command array
 * @returns {any}
 */
exports.commandArray = function () {
    var commandArray = plugins.argv._;
    return commandArray;
};
/**
 * returns a cli option
 * @param optionName
 * @returns {CliOption}
 */
exports.option = function (optionName) {
    var cliOption = {
        name: optionName,
        specified: false,
        value: false
    };
    if (plugins.smartparam.exists(plugins.argv, optionName)) {
        cliOption.name = optionName;
        cliOption.specified = true;
        cliOption.value = plugins.argv[optionName]; //we already know from the "if" above that the value is available.
    }
    return cliOption;
};
exports.options = function () {
    var options = {};
    for (var key in plugins.argv) {
        if (key != "_") {
            options['key'] = plugins.argv['key'];
        }
    }
    return options;
};
/**
 * returns Directory of cwd
 * @returns {{path: string}}
 */
exports.cwd = function () {
    return {
        path: process.cwd()
    };
};

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNtYXJ0Y2xpLmdldHRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkNBQTJDOztBQUczQyxJQUFPLE9BQU8sV0FBVyxvQkFBb0IsQ0FBQyxDQUFDO0FBQy9DLElBQU8sY0FBYyxXQUFXLG1CQUFtQixDQUFDLENBQUM7QUFFckQ7Ozs7R0FJRztBQUNRLGVBQU8sR0FBRztJQUNqQixJQUFJLFVBQVUsR0FBRztRQUNiLFNBQVMsRUFBRSxjQUFjLENBQUMsZUFBZSxFQUFFO1FBQzNDLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsU0FBUyxFQUFFLG1CQUFXLEVBQUU7S0FDM0IsQ0FBQTtJQUNELE1BQU0sQ0FBQyxVQUFVLENBQUM7QUFDdEIsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNRLHVCQUFlLEdBQUcsVUFBUyxhQUFhO0lBQy9DLElBQUksZUFBZSxHQUFpQztRQUNoRCxTQUFTLEVBQUUsS0FBSztRQUNoQixJQUFJLEVBQUUsV0FBVztRQUNqQixLQUFLLEVBQUMsYUFBYTtLQUN0QixDQUFDO0lBQ0YsRUFBRSxDQUFBLENBQUMsYUFBYSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkIsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsOEVBQThFLENBQUMsQ0FBQztRQUN4RyxNQUFNLENBQUMsZUFBZSxDQUFDO0lBQzNCLENBQUM7SUFDRCxFQUFFLENBQUEsQ0FBQyxjQUFjLENBQUMsdUJBQXVCLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZELGVBQWUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLGVBQWUsQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDekQsQ0FBQztJQUNELE1BQU0sQ0FBQyxlQUFlLENBQUM7QUFDM0IsQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1EsbUJBQVcsR0FBRztJQUNyQixJQUFJLFdBQVcsR0FBbUMsRUFBRSxDQUFDO0lBQ3JELElBQUksU0FBUyxHQUFHLG9CQUFZLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsU0FBUyxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2xCLEdBQUcsQ0FBQyxDQUFDLElBQUksSUFBSSxJQUFJLFNBQVMsQ0FBQyxDQUFBLENBQUM7UUFDeEIsSUFBSSxpQkFBZSxHQUFpQztZQUNoRCxTQUFTLEVBQUMsSUFBSTtZQUNkLElBQUksRUFBQyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQ3BCLEtBQUssRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztTQUM1QixDQUFBO1FBQ0QsV0FBVyxDQUFDLElBQUksQ0FBQyxpQkFBZSxDQUFDLENBQUM7SUFDdEMsQ0FBQztJQUNELE1BQU0sQ0FBQyxXQUFXLENBQUM7QUFDdkIsQ0FBQyxDQUFDO0FBRUY7OztHQUdHO0FBQ1Esb0JBQVksR0FBRztJQUN0QixJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNsQyxNQUFNLENBQUMsWUFBWSxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUdGOzs7O0dBSUc7QUFDUSxjQUFNLEdBQUcsVUFBUyxVQUFpQjtJQUMxQyxJQUFJLFNBQVMsR0FBd0I7UUFDakMsSUFBSSxFQUFDLFVBQVU7UUFDZixTQUFTLEVBQUUsS0FBSztRQUNoQixLQUFLLEVBQUUsS0FBSztLQUNmLENBQUM7SUFDRixFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNyRCxTQUFTLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQztRQUM1QixTQUFTLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztRQUMzQixTQUFTLENBQUMsS0FBSyxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUEsQ0FBQyxrRUFBa0U7SUFDakgsQ0FBQztJQUNELE1BQU0sQ0FBQyxTQUFTLENBQUM7QUFDckIsQ0FBQyxDQUFDO0FBR1MsZUFBTyxHQUFHO0lBQ2pCLElBQUksT0FBTyxHQUFHLEVBQUUsQ0FBQztJQUNqQixHQUFHLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUMzQixFQUFFLENBQUMsQ0FBQyxHQUFHLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNiLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3pDLENBQUM7SUFDTCxDQUFDO0lBQ0QsTUFBTSxDQUFDLE9BQU8sQ0FBQztBQUNuQixDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDUSxXQUFHLEdBQUc7SUFDYixNQUFNLENBQUM7UUFDSCxJQUFJLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBRTtLQUN0QixDQUFBO0FBQ0wsQ0FBQyxDQUFDIiwiZmlsZSI6InNtYXJ0Y2xpLmdldHRlcnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSBwYXRoPVwidHlwaW5ncy9pbmRleC5kLnRzXCIgLz5cclxuXHJcbmltcG9ydCAqIGFzIGludGVyZmFjZXMgZnJvbSBcIi4vc21hcnRjbGkuaW50ZXJmYWNlc1wiO1xyXG5pbXBvcnQgcGx1Z2lucyA9IHJlcXVpcmUoXCIuL3NtYXJ0Y2xpLnBsdWdpbnNcIik7XHJcbmltcG9ydCBTbWFydGNsaUNoZWNrcyA9IHJlcXVpcmUoXCIuL3NtYXJ0Y2xpLmNoZWNrc1wiKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAcGFyYW0gY29tbWFuZFN0cmluZ1xyXG4gKiBAcmV0dXJucyB7e3NwZWNpZmllZDogYm9vbGVhbiwgbmFtZTogYW55LCBhcmd1bWVudHM6IENsaUNvbW1hbmRBcmd1bWVudH19XHJcbiAqL1xyXG5leHBvcnQgbGV0IGNvbW1hbmQgPSBmdW5jdGlvbigpOmludGVyZmFjZXMuQ2xpQ29tbWFuZCB7XHJcbiAgICB2YXIgY2xpQ29tbWFuZCA9IHtcclxuICAgICAgICBzcGVjaWZpZWQ6IFNtYXJ0Y2xpQ2hlY2tzLmNvbW1hbmRQcmVzZW5jZSgpLFxyXG4gICAgICAgIG5hbWU6IHBsdWdpbnMuYXJndi5fWzBdLFxyXG4gICAgICAgIGFyZ3VtZW50czogY29tbWFuZEFyZ3MoKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsaUNvbW1hbmQ7XHJcbn07XHJcblxyXG4vKipcclxuICogZ2V0cyB0aGUgc2Vjb25kIG9yIGhpZ2hlciB2YWx1ZSBvZiBwbHVnaW5zLmFyZ3YuXyBpZiBzcGVjaWZpZWQgYW5kIHJldHVybnMgaXQgYXMgY29tbWFuZEFyZ3VtZW50XHJcbiAqIEBwYXJhbSBhcmd1bWVudExldmVsXHJcbiAqIEByZXR1cm5zIHt7c3BlY2lmaWVkOiAoYm9vbGVhbnxib29sZWFuKSwgbmFtZX19XHJcbiAqL1xyXG5leHBvcnQgbGV0IGNvbW1hbmRBcmd1bWVudCA9IGZ1bmN0aW9uKGFyZ3VtZW50TGV2ZWwpOmludGVyZmFjZXMuQ2xpQ29tbWFuZEFyZ3VtZW50IHtcclxuICAgIHZhciBjb21tYW5kQXJndW1lbnQ6aW50ZXJmYWNlcy5DbGlDb21tYW5kQXJndW1lbnQgPSB7XHJcbiAgICAgICAgc3BlY2lmaWVkOiBmYWxzZSxcclxuICAgICAgICBuYW1lOiBcInVuZGVmaW5lZFwiLFxyXG4gICAgICAgIGxldmVsOmFyZ3VtZW50TGV2ZWxcclxuICAgIH07XHJcbiAgICBpZihhcmd1bWVudExldmVsIDwgMSkge1xyXG4gICAgICAgIHBsdWdpbnMuYmVhdXR5bG9nLmVycm9yKFwic21hcnRjbGkuZ2V0LmFyZ3VtZW50IGNhbm5vdCBiZSBpbnZva2VkIHdpdGggYW4gYXJndW1lbnRMZXZlbCBzbWFsbGVyIHRoYW4gMVwiKTtcclxuICAgICAgICByZXR1cm4gY29tbWFuZEFyZ3VtZW50O1xyXG4gICAgfVxyXG4gICAgaWYoU21hcnRjbGlDaGVja3MuY29tbWFuZEFyZ3VtZW50UHJlc2VuY2UoYXJndW1lbnRMZXZlbCkpIHtcclxuICAgICAgICBjb21tYW5kQXJndW1lbnQuc3BlY2lmaWVkID0gdHJ1ZTtcclxuICAgICAgICBjb21tYW5kQXJndW1lbnQubmFtZSA9IHBsdWdpbnMuYXJndi5fW2FyZ3VtZW50TGV2ZWxdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbW1hbmRBcmd1bWVudDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXR1cm5zIGFycmF5IHdpdGggY29tbWFuZEFyZ3NcclxuICogQHJldHVybnMge0NsaUNvbW1hbmRBcmd1bWVudFtdfVxyXG4gKi9cclxuZXhwb3J0IGxldCBjb21tYW5kQXJncyA9IGZ1bmN0aW9uKCk6aW50ZXJmYWNlcy5DbGlDb21tYW5kQXJndW1lbnRbXSB7XHJcbiAgICB2YXIgY29tbWFuZEFyZ3M6aW50ZXJmYWNlcy5DbGlDb21tYW5kQXJndW1lbnRbXSA9IFtdO1xyXG4gICAgdmFyIGFyZ3NBcnJheSA9IGNvbW1hbmRBcnJheSgpLnNsaWNlKDApO1xyXG4gICAgYXJnc0FycmF5LnNoaWZ0KCk7XHJcbiAgICBmb3IgKGxldCBpdGVtIGluIGFyZ3NBcnJheSl7XHJcbiAgICAgICAgbGV0IGNvbW1hbmRBcmd1bWVudDppbnRlcmZhY2VzLkNsaUNvbW1hbmRBcmd1bWVudCA9IHtcclxuICAgICAgICAgICAgc3BlY2lmaWVkOnRydWUsXHJcbiAgICAgICAgICAgIG5hbWU6YXJnc0FycmF5W2l0ZW1dLFxyXG4gICAgICAgICAgICBsZXZlbDogcGFyc2VJbnQoaXRlbSkgKyAxXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbW1hbmRBcmdzLnB1c2goY29tbWFuZEFyZ3VtZW50KTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21tYW5kQXJncztcclxufTtcclxuXHJcbi8qKlxyXG4gKiByZXR1cm5zIGNvbXBsZXRlIGNvbW1hbmQgYXJyYXlcclxuICogQHJldHVybnMge2FueX1cclxuICovXHJcbmV4cG9ydCBsZXQgY29tbWFuZEFycmF5ID0gZnVuY3Rpb24gKCk6c3RyaW5nW10ge1xyXG4gICAgdmFyIGNvbW1hbmRBcnJheSA9IHBsdWdpbnMuYXJndi5fO1xyXG4gICAgcmV0dXJuIGNvbW1hbmRBcnJheTtcclxufTtcclxuXHJcblxyXG4vKipcclxuICogcmV0dXJucyBhIGNsaSBvcHRpb25cclxuICogQHBhcmFtIG9wdGlvbk5hbWVcclxuICogQHJldHVybnMge0NsaU9wdGlvbn1cclxuICovXHJcbmV4cG9ydCBsZXQgb3B0aW9uID0gZnVuY3Rpb24ob3B0aW9uTmFtZTpzdHJpbmcpOmludGVyZmFjZXMuQ2xpT3B0aW9uIHtcclxuICAgIHZhciBjbGlPcHRpb246aW50ZXJmYWNlcy5DbGlPcHRpb24gPSB7XHJcbiAgICAgICAgbmFtZTpvcHRpb25OYW1lLFxyXG4gICAgICAgIHNwZWNpZmllZDogZmFsc2UsXHJcbiAgICAgICAgdmFsdWU6IGZhbHNlXHJcbiAgICB9O1xyXG4gICAgaWYgKHBsdWdpbnMuc21hcnRwYXJhbS5leGlzdHMocGx1Z2lucy5hcmd2LG9wdGlvbk5hbWUpKSB7XHJcbiAgICAgICAgY2xpT3B0aW9uLm5hbWUgPSBvcHRpb25OYW1lO1xyXG4gICAgICAgIGNsaU9wdGlvbi5zcGVjaWZpZWQgPSB0cnVlO1xyXG4gICAgICAgIGNsaU9wdGlvbi52YWx1ZSA9IHBsdWdpbnMuYXJndltvcHRpb25OYW1lXSAvL3dlIGFscmVhZHkga25vdyBmcm9tIHRoZSBcImlmXCIgYWJvdmUgdGhhdCB0aGUgdmFsdWUgaXMgYXZhaWxhYmxlLlxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNsaU9wdGlvbjtcclxufTtcclxuXHJcblxyXG5leHBvcnQgbGV0IG9wdGlvbnMgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBvcHRpb25zID0ge307XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gcGx1Z2lucy5hcmd2KSB7XHJcbiAgICAgICAgaWYgKGtleSAhPSBcIl9cIikge1xyXG4gICAgICAgICAgICBvcHRpb25zWydrZXknXSA9IHBsdWdpbnMuYXJndlsna2V5J107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG9wdGlvbnM7XHJcbn07XHJcblxyXG4vKipcclxuICogcmV0dXJucyBEaXJlY3Rvcnkgb2YgY3dkXHJcbiAqIEByZXR1cm5zIHt7cGF0aDogc3RyaW5nfX1cclxuICovXHJcbmV4cG9ydCBsZXQgY3dkID0gZnVuY3Rpb24oKTppbnRlcmZhY2VzLkRpcmVjdG9yeSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBhdGg6IHByb2Nlc3MuY3dkKClcclxuICAgIH1cclxufTsiXX0=
